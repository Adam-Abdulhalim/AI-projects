# -*- coding: utf-8 -*-
"""A_Star_Abdulhalim.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17quV18d3qAJ29j1Xevi2Px3E1ufsQKoy
"""

import heapq
import math
import matplotlib.pyplot as plt
import numpy as np

def ACTIONS(graph, vertex):
    if graph[vertex]:
      print("Neighbors of ", vertex, ":")
      print(graph[vertex])

def a_star_search(graph, start, end):
    # Priority queue to store nodes and their costs/path taken to get to them. Basically open list
    pq = [(math.dist(start, end), start, [])]
    
    # Make visited list a set object so no nodes are repeated
    closed = set()

    while pq:

        # Pops lowest cost node off of queue, treats it as current node.      
        (cost, current, path) = heapq.heappop(pq)

        # If goal reached, return path taken
        if current == end:
            return path + [current]

        # If current has already been explored, skip
        if current in closed:
            continue

        closed.add(current)

        # For all nodes neighboring current...
        for neighbor in graph[current]:

            # Calculate previous node's heuristic
            prev_heuristic = math.dist(current, end)

            # Calculate current heuristic
            heuristic = math.dist(neighbor, end)

            # Calculate cost to travel from previous to current
            distance = math.dist(current, neighbor)

            # Push neighbor to pq in order to choose next cheapest option, 
            # subtract previous heuristic so only new heuristic and path cost is taken into account
            heapq.heappush(pq, (cost + distance + heuristic - prev_heuristic, neighbor, path + [current]))
            
            #print(closed)


# Nodes and Edges
graph = {
    (7, 10): [(10, 6), (10, 15), (9, 22), (7, 32)],                                                               #START
    (10, 6): [(7, 10), (10, 15), (40, 6), (9, 22), (7, 32)],                                                      #LEFT RECTANGLE
    (10, 15): [(7, 10), (10, 6), (40, 15), (9, 22), (7, 32), (18, 21), (24, 20), (32, 20)],
    (40, 15): [(10, 15), (40, 6), (9, 22), (18, 21), (24, 20), (32, 20), (28, 34), (34, 29), (42, 24), (44, 10)],
    (40, 6): [(40, 15), (10, 6), (42, 24), (44, 10), (51, 16), (62, 22), (57, 9), (57, 16), (62, 6)],
    (9, 22): [(7, 10), (10, 6), (10, 15), (40, 15), (7, 32), (18, 21)],                                           #LEFT PENTAGON
    (7, 32): [(7, 10), (10, 6), (10, 15), (9, 22), (16, 41)],
    (16, 41): [(7, 32), (22, 32), (28, 34), (34, 40), (42, 41)],
    (22, 32): [(18, 21), (16, 41), (24, 20), (28, 34), (34, 40)],
    (18, 21): [(9, 22), (22, 32), (10, 15), (40, 15), (24, 20), (28, 34)],
    (24, 20): [(10, 15), (40, 15), (22, 32), (18, 21), (28, 34), (32, 20)],                                       #LEFT TRIANGLE
    (28, 34): [(40, 15), (16, 41), (22, 32), (18, 21), (24, 20), (32, 20), (34, 29), (34, 40)],
    (32, 20): [(10, 15), (40, 15), (24, 20), (28, 34), (34, 29), (34, 40), (42, 24), (47, 36)],
    (34, 29): [(40, 15), (28, 34), (32, 20), (42, 24), (34, 40), (47, 36), (44, 10), (50, 22), (57, 16)],         #MID TRAPEZOID
    (34, 40): [(16, 41), (22, 32), (28, 34), (32, 20), (34, 29), (42, 41)],
    (42, 41): [(16, 41), (34, 40), (47, 36), (50, 40), (62, 40), (68, 41)],
    (47, 36): [(32, 20), (34, 29), (42, 41), (50, 40), (50, 22), (42, 24)],
    (42, 24): [(40, 15), (40, 6), (32, 20), (34, 29), (47, 36), (44, 10), (51, 16), (50, 40), (50, 22), (57, 16)],#RIGHT TRIANGLE
    (44, 10): [(40, 15), (40, 6), (34, 29), (42, 24), (51, 16), (57, 9), (57, 16), (62, 6), (62, 22)],
    (51, 16): [(40, 6), (42, 24), (44, 10), (50, 22), (62, 22), (63, 20), (57, 9), (57, 16)],
    (50, 22): [(62, 22), (50, 40), (42, 24), (51, 16), (34, 29), (47, 36), (63, 20), (57, 9), (57, 16) ],         #RIGHT RECTANGLE
    (50, 40): [(50, 22), (62, 40), (68, 41), (42, 24), (42, 41), (47, 36)],
    (62, 40): [(50, 40), (62, 22), (42, 41), (68, 41), (64, 38), (63, 20), (67, 16)],
    (62, 22): [(40, 6), (44, 10), (51, 16), (50, 22), (62, 40), (64, 38), (69, 17), (63, 20), (67, 16), (57, 16)],
    (64, 38): [(68, 41), (69, 17), (63, 20), (67, 16), (62, 40), (62, 22)],                                       #RIGHT TRAPEZOID
    (68, 41): [(71, 37), (42, 41), (50, 40), (62, 40), (64, 38), (73, 40)],
    (71, 37): [(68, 41), (69, 17), (73, 40)],
    (69, 17): [(67, 16), (67, 9), (63, 20), (62, 22), (64, 38), (71, 37), (73, 40)],
    (57, 9): [(57, 16), (62, 6), (40, 6), (44, 10), (51, 16), (50, 22)],                                          #HEXAGON
    (57, 16): [(57, 9), (63, 20), (40, 6), (34, 29), (42, 24), (44, 10), (51, 16), (50, 22), (62, 22)],
    (63, 20): [(57, 16), (67, 16), (51, 16), (50, 22), (62, 40), (62, 22), (64, 38), (69, 17)],
    (67, 16): [(63, 20), (67, 9), (62, 40), (62, 22), (64, 38), (69, 17), ],
    (67, 9): [(67, 16), (62, 6), (69, 17)],
    (62, 6): [(40, 6), (44, 10), (57, 9), (67, 9)],
    (73, 40): [(68, 41), (71, 37), (69, 17)],                                                                     #GOAL

}

# Return Path
print("Optimal Path: ")
print(a_star_search(graph, (7, 10), (73, 40)))

# Store path list
path = a_star_search(graph, (7, 10), (73, 40))

# Draw obstacle course
def draw_board():

    fig = plt.figure(figsize=[20,10])
    ax = fig.add_subplot(111)
    return fig, ax

def draw_grid(ax):

    for x in range(100):
        ax.plot([x, x], [0,50-1], color = '0.75', linestyle='none')

    for y in range(50):
        ax.plot([0, 50-1], [y,y], color = '0.75', linestyle='none')
    ax.set_position([0,0.02,1,1])

def draw_line(ax, xs, ys):
    ax.plot(xs, ys, color='black')

def draw_path_line(ax, xs, ys):
    ax.plot(xs, ys, color='blue')


fig, ax = draw_board()

draw_grid(ax)

# Left Rectangle
draw_line(ax, [10,10], [6,15])
draw_line(ax, [10,40], [15,15])
draw_line(ax, [40,40], [6,15])
draw_line(ax, [10,40], [6,6])

# Left Pentagon
draw_line(ax, [9,7], [22,32])
draw_line(ax, [16,7], [41,32])
draw_line(ax, [16,22], [41,32])
draw_line(ax, [18,22], [21,32])
draw_line(ax, [18,9], [21,22])

# Left Triangle
draw_line(ax, [24,32], [20,20])
draw_line(ax, [24,28], [20,34])
draw_line(ax, [32,28], [20,34])

# Middle Trapezoid
draw_line(ax, [34,34], [29,40])
draw_line(ax, [42,34], [41,40])
draw_line(ax, [47,42], [36,41])
draw_line(ax, [47,34], [36,29])

# Right Triangle
draw_line(ax, [42,44], [24,10])
draw_line(ax, [42,51], [24,16])
draw_line(ax, [51,44], [16,10])

# Right Rectangle
draw_line(ax, [50,50], [40,22])
draw_line(ax, [50,62], [40,40])
draw_line(ax, [62,50], [22,22])
draw_line(ax, [62,62], [40,22])

# Right Trapezoid
draw_line(ax, [64,68], [38,41])
draw_line(ax, [71,68], [37,41])
draw_line(ax, [69,71], [17,37])
draw_line(ax, [69,64], [17,38])

# Hexagon
draw_line(ax, [57,57], [16,9])
draw_line(ax, [67,67], [16,9])
draw_line(ax, [62,57], [6,9])
draw_line(ax, [62,67], [6,9])
draw_line(ax, [63,57], [20,16])
draw_line(ax, [63,67], [20,16])


# Increment through path and draw
l = 1
j = 0
while l < len(path):
  draw_path_line(ax, [path[j][0],path[l][0]], [path[j][1],path[l][1]])
  j += 1
  l += 1

# Start and Goal markers
plt.plot(7, 10, marker="o", markersize=30, markeredgecolor="purple", markerfacecolor="pink")
plt.plot(73, 40, marker="o", markersize=30, markeredgecolor="green", markerfacecolor="aquamarine")

# Show Plot
plt.xticks(np.arange(0, 101, 1.0))
plt.yticks(np.arange(0, 51, 1.0))
plt.show()


# Example ACTIONS function usage
print("Example usage of ACTIONS function: ")
ACTIONS(graph, (73, 40)) #prints all vertices that are neighbors of the goal node, (73, 40)