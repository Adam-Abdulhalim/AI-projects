# -*- coding: utf-8 -*-
"""AIFinalProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1toe06sDwv6E0ywI2FBnYAz8XGiURwUgv
"""

import matplotlib.pyplot as plt
import random
import math

# Define obstacle and goal
#obstacles = [(10, 50, 25), (100, 100, 70), (200, 75, 50), (80, 200, 40)]
obstacles = []
goal = (200, 200)

# Define constants
DELTA_Q = 10
MAX_ITER = 1000

# Define helper functions
def sample():
        return (random.uniform(0, 250), random.uniform(0, 250))

def nearest(q, V):
    min_distance = float('inf')
    min_vertex = None
    for v in V:
        d = math.dist(q, v)
        if d < min_distance:
            min_distance = d
            min_vertex = v
    return min_vertex

def new_conf(q_near, q_rand):
    if math.dist(q_near, q_rand) < DELTA_Q:
        return q_rand
    else:
        theta = math.atan2(q_rand[1]-q_near[1], q_rand[0]-q_near[0])
        return (q_near[0]+DELTA_Q*math.cos(theta), q_near[1]+DELTA_Q*math.sin(theta))

def is_in_obstacle(q, obstacles):
    for obs in obstacles:
        if math.dist(q, (obs[0], obs[1])) < obs[2]:
            return True
    return False

# Define main RRT function
def rrt(obstacles, goal):
    # Define initial vertex
    V = [(0, 0)]
    E = []

    # Generate RRT
    for i in range(MAX_ITER):
        # Sample a random point
        q_rand = sample()

        # Find nearest vertex
        q_near = nearest(q_rand, V)

        # Get new configuration
        q_new = new_conf(q_near, q_rand)

        # Check if new configuration is in obstacle
        if is_in_obstacle(q_new, obstacles):
            continue

        # Add new vertex to graph
        V.append(q_new)

        # Add new edge to graph
        E.append((q_near, q_new))

        # Check if goal has been reached
        if math.dist(q_new, goal) < DELTA_Q:
            V.append(goal)
            E.append((q_new, goal))
            break

    return V, E

# Generate RRT and plot it
V, E = rrt(obstacles, goal)

# Plot obstacles
fig, ax = plt.subplots()
for obs in obstacles:
    circle = plt.Circle((obs[0], obs[1]), obs[2], color='r')
    ax.add_artist(circle)

# Plot edges
for e in E:
    plt.plot([e[0][0], e[1][0]], [e[0][1], e[1][1]], color='teal')

# Plot vertices
for v in V:
    plt.plot(v[0], v[1], 'bo')

# Change start node color
plt.plot(V[0][0], V[0][1], markersize=20, color='purple', marker='o')

# Plot goal
plt.plot(goal[0], goal[1], 'go', markersize=20)

# Show plot
plt.axis('equal')
plt.show()