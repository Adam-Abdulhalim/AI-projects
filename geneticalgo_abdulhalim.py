# -*- coding: utf-8 -*-
"""GeneticAlgo_Abdulhalim.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1092d-YAYCbw-r34lhl6DZ2yAq3gWztrC
"""

import random
import time

def GeneticAlgo(population, n):
  new_pop = []
  fitness_list = []

  for i in range(len(population)):
    fitness_list.append(fitness_fn(population[i], n))

  for i in range(len(population)//2):
    #weights_list = []
    #for value in fitness_list:
    #  weights_list.append(1.0/value)
    parent1 = random.choices(population, weights = fitness_list, k = 1)[0]
    parent2 = random.choices(population, weights = fitness_list, k = 1)[0]
    x, y = crossover_mut(parent1, parent2, n)
    new_pop.append(x)
    new_pop.append(y)

  return new_pop

def fitness_fn(board, n):
    fitness = 1
    for i in range(n):
      for j in range(i+1, n):
        if board[i] == board[j] or abs(board[i]-board[j]) == j-i:
          fitness = fitness + 1
    return (1.0/fitness)


def crossover_mut(x, y, n):

  new1 = []
  new2 = []
  cross_point = random.randint(1, n)

  mutation_threshold = 0.4

  mutation1 = random.random()

  mutation2 = random.random()

  for i in range(0, cross_point):
    new1.append(x[i])
    new2.append(y[i])
  for j in range(cross_point, n):
    new1.append(y[j])
    new2.append(x[j])

  if(mutation1 <= mutation_threshold):
    mut_ind = random.randint(0, n-1)
    mut_num = random.randint(1, n)
    new1[mut_ind] = mut_num


  if(mutation2 <= mutation_threshold):
    mut_ind = random.randint(0, n-1)
    mut_num = random.randint(1, n)
    new2[mut_ind] = mut_num

  return new1, new2

def printBoard(board):
  z = len(board)
  for k in range(0, z):
    q = board[k]
    for m in range(1, z+1):
      if m == q:
        print("\033[1mQ\033[0m", end =" ")
      else:
        print("\033[1m_\033[0m", end =" ")
    print("")

while(True):
  print("\033[1mDISCLAIMER: Fitness Values fall between 0 and 1 and are better the higher they are. \n" +
        "The fitness of a board is equal to 1 / (# of Queen Collisions on the board + 1).\033[0m\n")
  n = int(input("How many queens? (4-20 inclusive) Enter 0 to exit.\n"))
  if n == 0:
    break

  start = time.perf_counter()

  # Create initial population
  population = []
  for i in range(0, 100):
    ind = []
    for j in range(1, n+1):
      ind.append(random.randint(1, n))
    population.append(ind)

  generation = 1

  while(True):
    population = GeneticAlgo(population, n)
    fitness_list = []
    for i in range(len(population)):
      fitness_list.append(fitness_fn(population[i], n))
    best_fit = max(fitness_list)
    best_ind = fitness_list.index(best_fit)

    print("\033[1mGENERATION:\033[0m   " + str(generation) + "\n\033[1mBEST FITNESS:\033[0m " + str(best_fit) + " (" + str(int((1/best_fit) - 1)) + " COLLISIONS)")
    print("\033[1mMOST FIT BOARD:\033[0m " + str(population[best_ind]) + "\n")
    #printBoard(population[best_ind])

    if best_fit == 1:
      printBoard(population[best_ind])
      print("\nSOLUTION FOR " + str(n) + " QUEENS FOUND IN GENERATION " + str(generation))
      break

    generation = generation + 1

  stop = time.perf_counter()
  runtime = stop - start
  print(f"ITERATION RUNTIME: {runtime:0.4f}s\n")